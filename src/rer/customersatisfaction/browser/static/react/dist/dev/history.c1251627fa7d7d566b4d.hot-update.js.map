{"version":3,"file":"history.c1251627fa7d7d566b4d.hot-update.js","sources":["webpack:///./src/rer/customersatisfaction/browser/static/react/javascripts/history/CustomerSatisfactionList/index.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport DataTable from 'react-data-table-component';\nimport format from 'date-fns/format';\nimport { TranslationsContext } from '../../TranslationsContext';\nimport Select from 'react-select';\nimport {\n  ApiContext,\n  DEFAULT_B_SIZE,\n  DEFAULT_SORT_ON,\n  DEFAULT_SORT_ORDER,\n} from '../../ApiContext';\nimport apiFetch from '../../utils/apiFetch';\nimport { getCustomerSatisfactionLables } from '../utils';\n\nimport './index.less';\n\nconst CustomerSatisfactionList = () => {\n  const getTranslationFor = useContext(TranslationsContext);\n  const {\n    data,\n    portalUrl,\n    fetchApi,\n    loading,\n    handleApiResponse,\n    setB_size,\n    handlePageChange,\n    b_size,\n    setSorting,\n  } = useContext(ApiContext);\n  const labels = getCustomerSatisfactionLables(getTranslationFor);\n  const [filters, setFilters] = useState({});\n  const [textTimeout, setTextTimeout] = useState(0);\n  const [resetPaginationToggle, setResetPaginationToggle] = useState(false);\n  const [selectedRows, setSelectedRows] = React.useState([]);\n  const [toggleCleared, setToggleCleared] = useState(false);\n\n  //------------------COLUMNS----------------------\n  const columns = [\n    {\n      name: labels.page,\n      selector: 'title',\n      sortable: true,\n      cell: row => {\n        return row.url ? (\n        <div>\n          <a href={row.url} title={row.title}>\n            {row.title}\n          </a>\n        </div>\n      ): (<div>{row.title}</div>)},\n    },\n    {\n      name: labels.ok,\n      selector: 'ok',\n      sortable: true,\n      width: '120px',\n    },\n    {\n      name: labels.nok,\n      selector: 'nok',\n      sortable: true,\n      width: '120px',\n    },\n    {\n      name: labels.last_voted,\n      selector: 'last_vote',\n      sortable: true,\n      cell: row => (\n        <div>\n          {row.last_vote\n            ? format(new Date(row.last_vote), 'dd/MM/yyyy HH:mm:ss')\n            : ''}\n        </div>\n      ),\n      width: '160px',\n    },\n    {\n      name: labels.comments,\n      selector: 'comments',\n      sortable: false,\n      width: '80px',\n      cell: row => (\n        <div>\n          <a href={`${row.url}/show-feedbacks`}>\n            {row.comments.length}\n          </a>\n        </div>\n      ),\n    },\n  ];\n\n  //------------ROW SELECTION------------\n  const handleRowSelected = React.useCallback(state => {\n    setSelectedRows(state.selectedRows);\n  }, []);\n\n  const contextActions = React.useMemo(() => {\n    const handleDelete = () => {\n      // eslint-disable-next-line no-alert\n      if (\n        window.confirm(\n          `${labels.resetFeedbacksConfirm} \\n${selectedRows\n            .map(r => r.title)\n            .join('\\n')}`,\n        )\n      ) {\n        setToggleCleared(!toggleCleared);\n\n        //call delete foreach item selected\n        let url = portalUrl + '/@customer-satisfaction-delete';\n        let method = 'DELETE';\n        let fetches = [];\n\n        selectedRows.forEach(r => {\n          fetches.push(\n            apiFetch({\n              url: url + '/' + r.uid,\n              method: method,\n            }),\n          );\n        });\n\n        Promise.all(fetches).then(data => {\n          handleApiResponse(data[0]);\n          fetchApi();\n        });\n      }\n    };\n\n    return (\n      <button\n        key=\"delete\"\n        onClick={handleDelete}\n        className=\"plone-btn plone-btn-danger\"\n      >\n        {labels.resetFeedbacksButton}\n      </button>\n    );\n  }, [data.items, selectedRows, toggleCleared]);\n  \n  //------------FILTERING-----------\n\n  const SubHeaderComponent = React.useMemo(() => {\n    const handleClearText = () => {\n      setResetPaginationToggle(!resetPaginationToggle);\n      const newFilters = { ...filters, text: '' };\n      setFilters(newFilters);\n      doQuery(newFilters);\n    };\n\n    const delayTextSubmit = value => {\n      const newFilters = { ...filters, text: value };\n      if (textTimeout) {\n        clearInterval(textTimeout);\n      }\n      const timeout = setTimeout(() => {\n        doQuery(newFilters);\n      }, 1000);\n      setFilters(newFilters);\n      setTextTimeout(timeout);\n    };\n\n    const doQuery = queryFilters => {\n      const params = { ...queryFilters };\n      if (params.text?.length) {\n        params.text = params.text + '*';\n      }\n      fetchApi(null, params);\n    };\n    return (\n      <>\n        <div className=\"search-wrapper\">\n          <input\n            id=\"search\"\n            type=\"text\"\n            placeholder={labels.filterTitle}\n            aria-label={labels.search}\n            value={filters.text || ''}\n            onChange={e => delayTextSubmit(e.target.value)}\n          />\n          <button type=\"button\" onClick={handleClearText}>\n            X\n          </button>\n        </div>\n      </>\n    );\n  }, [filters, resetPaginationToggle, data.items]);\n\n  return (\n    <div className=\"customer-satisfaction-history-list\">\n      <DataTable\n        columns={columns}\n        data={data.items}\n        striped={true}\n        highlightOnHover={true}\n        pointerOnHover={false}\n        noDataComponent={labels.noData}\n        responsive={true}\n        defaultSortField={DEFAULT_SORT_ON}\n        defaultSortAsc={DEFAULT_SORT_ORDER == 'ascending'}\n        pagination={true}\n        paginationRowsPerPageOptions={[5, 25, 50, 100]}\n        paginationPerPage={b_size}\n        paginationServer={true}\n        paginationServerOptions={{\n          persistSelectedOnPageChange: true,\n          persistSelectedOnSort: false,\n        }}\n        paginationTotalRows={data.items_total}\n        onChangeRowsPerPage={size => setB_size(size)}\n        onChangePage={handlePageChange}\n        progressPending={loading}\n        sortServer={true}\n        onSort={(column, direction) => setSorting(column.selector, direction)}\n        paginationResetDefaultPage={resetPaginationToggle} // optionally, a hook to reset pagination to page 1\n        subHeader\n        subHeaderComponent={SubHeaderComponent}\n        selectableRows\n        onSelectedRowsChange={handleRowSelected}\n        contextActions={contextActions}\n        clearSelectedRows={toggleCleared}\n        contextMessage={{\n          singular: labels.singularSelected,\n          plural: labels.pluralSelected,\n          message: '',\n        }}\n      />\n    </div>\n  );\n};\nexport default CustomerSatisfactionList;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAIA;AAXA;AAcA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAOA;AAXA;AAcA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAFA;AALA;AACA;AAeA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAQA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAQA;AAAA;AAAA;AAMA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAxBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AA/BA;AAuCA;AACA;AAAA;;;;A","sourceRoot":""}